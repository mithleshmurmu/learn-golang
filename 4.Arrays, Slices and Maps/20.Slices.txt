Slices :-

-> continuous segment of an underlying array.
-> variable typed (element can be added or removed)
-> more flexible

Components of a Slice :-

pointer -> used to point the first element of the array.
length - len() -> number of elements it contains.
capacity - cap() -> numbers of elements in the underline array counting from the 		first element in the slice.

------------------------------------------------------
Declaring and initializing a slice :-

	<slice-name> := [] <data-type> {values}
	grades := [] int {10,20,30}


package main
import "fmt"

func main() {
	slice := [] int {10,20,30}
	fmt.Println(slice)
	
}

>>> go run main.go
    [ 10 20 30 ]

	
	underlying array
	  ----------
	  |   10   |   0
   	  ----------
     	  |   20   |   1
	  ----------
	  |   30   |   2
   	  ----------
     	  |   97   |   3
	  ----------
	  |   54   |   4
   	  ----------
     	  |   60   |   5
	  ----------
   
array[start_index : end_index]
array[0 : 3]
=> index - 0,1,2	// 3 is not included

array[1 : 6]
=> index - 1,2,3,4,5

array[ : 4]
=> index - 0,1,2,3

array[ : ]
=> index - 0,1,2,3,4,5



package main
import "fmt"

func main() {
	arr := [10] int {10,20,30,40,50,60,70,80,90,100}
	slice_1 := arr[1:8]
	fmt.Println(slice_1)
}

>>> go run main.go
    [ 20 30 40 50 60 70 80 ]



package main
import "fmt"

func main() {
	arr := [10] int {10,20,30,40,50,60,70,80,90,100}

	slice := arr[1:8]
	fmt.Println(slice)

	sub_slice := arr[0:3]
	fmt.Println(sub_slice)
}

>>> go run main.go
    [ 20 30 40 50 60 70 80 ]
    [ 20 30 40 ]

-- -- -- -- -- -- -- -- -- -- ---
	slice := make([] <data-type>, length, capacity)
	slice := make([] int, 5, 10)



package main
import "fmt"

func main() {
	slice := make([] int, 5,8)
	fmt.Println(slice)
	fmt.Println(len(slice))
	fmt.Println(cap(slice))

}

>>> go run main.go
    [ 0 0 0 0 0 ]
    5
    8


package main
import "fmt"

func main() {
	arr := [10] int {10,20,30,40,50,60,70,80,90,100}

	slice := arr[1:8]
	fmt.Println(cap(arr))
	fmt.Println(cap(slice))
}

>>> go run main.go
    10
    9

------------------------------------------------------------

Slice and index numbers :-


				    underlying array
					  ----------
	 slice				  |   10   |   0
   	----------			  ----------
        |   20   |   0			  |   20   |   1
	----------              	  ----------
	|   30   |   1			  |   30   |   2
   	---------- 			  ----------
        |   97   |   2		 	  |   97   |   3
	----------			  ----------
	|   54   |   3			  |   54   |   4
   	----------			  ----------
     	  				  |   60   |   5
	 				  ----------

Slice contains their own indexes starting from 0, when you change the value in the slice it gets effected on underlying array i.e it will update the value in the array.


					 underlying array
					  ----------
	 slice				  |   10   |   0
   	----------			  ----------
        |   20   |   0			  |   20   |   1
	----------              	  ----------
	|   30   |   1			  |   30   |   2
   	---------- 			  ----------
        |  1000  |   2		 	  |   1000  |   3
	----------			  ----------
	|   54   |   3			  |   54   |   4
   	----------			  ----------
     	  				  |   60   |   5
	 				  ----------


package main
import "fmt"

func main() {
	arr := [5] int {10,20,30,40,50}
	slice := arr[:3]

	fmt.Println(arr)
	fmt.Println(slice)

	slice[1] = 9000
	fmt.Println("after modification")
	fmt.Println(arr)
	fmt.Println(slice)

}
	
>>> go run main.go
    [ 10 20 30 40 50 ]
    [ 10 20 30 ]
    after modification
    [ 10 9000 30 40 50 ]
    [ 10 9000 30 40 50 ]

------------------------------------------------------------
Appending to a Slice :-

	func append(s []T, vs ...T) []T		// building append function
	func append(<slice-of-some-datatype>, <values-of-the-same-datatype>) <resulting-value-of-append-function>
	
	slice = append(slice, element-1, element-2)
	slice = append(slice, 10, 20, 30)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 

	underlying array
	  ----------
	  |   10   |   		   slice		 slice_1		slice_2
	  ----------		 ----------		----------		----------
     	  |   20   |   		 |   20   |   		|   20   | 		|   20   | 
	  ----------   		 ----------		----------		----------
	  |   30   |   		 |   30   |   		|   30   | 		|   30   | 
   	  ---------- 		 ---------- 		---------- 		---------- 
     	  |   40   |   					|  9000  | 		|  -90   | 
	  ----------		 len = 2		----------		----------	
				 capacity = 3					|  500   | 
							 len = 3		----------
							 cap = 3		
										len = 4
										cap = 6

slice := arr[1:3]
slice_1 := append(slice, 900)
slice_2 := append(slice, -90, 500)



package main
import "fmt"

func main() {
	arr := [4] int {10,20,30,40}

	slice := arr[1:3]

	fmt.Println(slice)
	fmt.Println(len(slice))
	fmt.Println(cap(slice))

	slice = append(slice, 900, -90, 50)
	
	fmt.Println(slice)
	fmt.Println(len(slice))
	fmt.Println(cap(slice))
}


>>> go run main.go
    [ 20 30 ]
    2
    3
    [ 20 30 900 -90 50 ]
    5
    6
-- -- -- -- -- -- -- -- -- -- --

slice = append(slice, anotherSlice...)

package main
import "fmt"

func main() {
	arr := [5] int{10, 20, 30, 40, 50}
	slice := arr[:2]
	arr_2 := [5] int {5, 15, 25, 35, 45}
	slice_2 := arr_2[:2]
	new_slice := append(slice, slice_2...)
	fmt.Println(new_slice)
}

>>> go run main.go
    [ 10 20 5 15 ]


-- -- -- -- -- -- -- -- -- -- --
Delete element from a Slice :-

package main
import "fmt"

func main() {
	arr := [5] int{10, 20, 30, 40, 50}
	i := 2
	fmt.Println(arr)
	slice_1 := arr[:i]
	slice_2 := arr[i+1:]
	new_slice := append(slice_1, slice_2...)
	fmt.Println(new_slice)
}

>>> go run main.go
    [ 10 20 30 40 50 ]
    [ 10 20 40 50 ]


-- -- -- -- -- -- -- -- -- -- --
Copying from a Slice :-

func copy(dst, src []Type) int

num := copy(dest_slice, src_slice)	// for this data type should be same

package main
import "fmt"

func main() {
	src_slice := [] int{10, 20, 30, 40, 50}
	dest_slice := make([] int, 3)
	num := copy(dest_slice, src_slice)
	fmt.Println(dest_slice)
	fmt.Println("Number of elements copied: ", num)
}

>>> go run main.go
    [ 10 20 30 ]
    Number of elements copied: 3

-- -- -- -- -- -- -- -- -- -- --
Looping through a Slice :-

package main
import "fmt"

func main() {
	arr := [] int{10, 20, 30, 40, 50}
	for index, value := range arr {
		fmt.Println(index, "=>", value)
	}
}
	
>>> go run main.go
0 => 10
1 => 20
2 => 30
3 => 40
4 => 50
-- -- -- -- -- -- -- -- -- -- --
Use cases when don't need index or values :-

package main
import "fmt"

func main() {
	arr := [] int{10, 20, 30, 40, 50}
	for _, value := range arr {
		fmt.Println(value)
	}
}

>>> go run main.go
10
20
30
40
50




