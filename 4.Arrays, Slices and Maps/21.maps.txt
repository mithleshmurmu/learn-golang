Maps :-

-> unordered collection of key/value pairs.
-> implemented by hash tables.
-> provide effiecient add, get and delete operations.

	Key	-> Value
	"en"	-> "English"
	"fr"	-> "French"
	"hi"	-> "Hindi"
	"it"	-> "Italian"
	"ko"	-> "Korean"


-----------------------------------------------------
Declaring and initializing a map :-

var <map_name> map[<key_data_type>] <value_data_type>

var my_map map[string] int

package main
import "fmt"

func main() {
	var codes map[string] string		// nil map
	codes["en"] = "English"
	fmt.Println(codes)
}

>>> go run main.go
panic: assignment to entry in nil map	// nil is zeo value of map

-- -- -- -- -- -- -- -- -- -- -- -- -- --
Creating a key value map :-

<map_name> := map[<key_data_type>] <value_data_type> {<key-value-pairs>}

codes := map[string] string{"en": "English", "fr": "French"}



package main
import "fmt"

func main() {
	codes := map[string]string{"en": "English", "fr": "French"}
	fmt.Println(codes)
}

>>> go run main.go
map[en:English fr:French]

-- -- -- -- -- -- -- -- -- -- -- -- --

Using make() function :-

<map_name> := make(map[<key_data_type>]<value_data_type>, <initial_capacity>)


package main
import "fmt"

func main() {
	codes := make(map[string]int)
	fmt.Println(codes)
}


>>> go run main.go
map[]

-- -- -- -- -- -- -- -- -- 	

Length of a map :-
-> using len() function:-

package main
import "fmt"

func main() {
	codes := map[string]string{"en": "English", "fr": "French", "hi": "Hindi"}
	fmt.Println(len(codes))
}

>>> go run main.go
3

-- -- -- -- -- -- -- -- -- 	

Accessing a map :-
using map[key]


package main
import "fmt"

func main() {
	codes := map[string]string{"en": "English", "fr": "French", "hi": "Hindi"}
	fmt.Println(codes["en"])
	fmt.Println(codes["fr"])
	fmt.Println(codes["hi"])
}

>>> go run main.go
English
French
Hindi